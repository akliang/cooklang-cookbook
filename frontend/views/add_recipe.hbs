
{{> logo}}

<div class="w-2/3 mx-auto">
  <div class="text-sm text-red-500 mb-5" id="msg"></div>

  <!-- help -->
  {{> help_desktop}}

  <form action="/add" method="post" id="add-recipe-form">
    <div class="w-full mb-2">
      <input class="w-full m-1 rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50 ml-0" type="text" name="title" id="title" placeholder="Title" value="{{data.title}}" autofocus>
    </div>

    <!-- dropzone -->
    <div class="w-full border-2 border-dashed rounded-md mb-2 dropzone" id="add-recipe"></div>
    <div class="w-full mb-2 hidden" id="dropzone-preview"></div>



    <div class="w-full mb-2">
      {{> recipeeditor/mobile recipe=data.recipe}}
    </div>

    <input type="hidden" name="edit" id="edit" value="{{data.slug}}">

    <div class="grid grid-cols-3 gap-3 w-full mx-auto">
      {{#if back}}
        <a href="{{back}}">
      {{else}}
        <a href="/">
      {{/if}}
        <div class="w-full bg-red-100 hover:bg-red-200 p-3 rounded-md">
          X
        </div>
      </a>
      <div class="col-span-2">
        <input class="w-full bg-blue-300 hover:bg-blue-400 p-3 rounded-md cursor-pointer" type="button" value="Save" id="submit-recipe">
      </div>
    </div>
  </form>
</div>

<div id="dropzone-template" class="hidden">
  <div class="dz-preview dz-file-preview">
    <img class="rounded-md ml-1" data-dz-thumbnail />
  </div>
</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.5.1/min/dropzone.min.js"></script>
<script type="text/javascript">
Dropzone.autoDiscover = false;
upload_icon = '<img src="{{getS3img "upload.png"}}" class="h-24 mx-auto p-3">';

theOne = new Dropzone("div#add-recipe", {
    autoProcessQueue: false,
    uploadMultiple: false,
    parallelUploads: 1,
    maxFiles: 1,
    maxFilesize: 15,
    paramName: 'recipe',
    url: "/add",
    thumbnailWidth: 600,
    thumbnailHeight: null,
    acceptedFiles: 'image/*',
    dictDefaultMessage: upload_icon,
    dictRemoveFile: '',
    dictCancelUpload: 'Uploading...',
    previewsContainer: document.getElementById('dropzone-preview'),
    addRemoveLinks: true,
    previewTemplate: document.getElementById('dropzone-template').innerHTML,

    init: function() {
        var myDropzone = this;  // closure

        // First change the button to actually tell Dropzone to process the queue.
        document.getElementById("submit-recipe").addEventListener("click", function(e) {
          // move the recipeeditor content into the textarea
          document.getElementById("recipe").value = document.getElementById("recipeeditor").innerText;

          // block submission if the title field is empty
          if (!document.getElementById("title").value) {
            document.getElementById("msg").innerText = "Title is required.";
          } else {
            if (myDropzone.getQueuedFiles().length > 0) {
              // Make sure that the form isn't actually being sent.
              e.preventDefault();
              e.stopPropagation();
              myDropzone.processQueue();
            } else {
              // if there are no photos, then manually submit the form
              document.getElementById("add-recipe-form").submit();
            }
          }
        });

        this.on("thumbnail", function(file, dataUrl) {
          // toggle containers
          document.getElementById('add-recipe').classList.add('hidden');
          document.getElementById('dropzone-preview').classList.remove('hidden');

          // style the remove button
          remove = document.getElementsByClassName('dz-remove')[0];
          remove.classList.add('text-sm');
          remove.innerHTML = "<div class='w-full bg-slate-200 p-4 text-center text-sm rounded-md ml-1 mt-2 '>Remove image</div>";
        });

        this.on("removedfile", function(file) {
          this.removeAllFiles();
          document.getElementById('add-recipe').classList.remove('hidden');
          document.getElementById('dropzone-preview').classList.add('hidden');
          // remove the existingimage hidden field
          if (document.getElementById("existingimage")) {
            document.getElementById("existingimage").remove();
          }
        });

        this.on("sending", function(data, xhr, formData) {

          formData.append("title", document.getElementById("title").value);
          formData.append("recipe", document.getElementById("recipe").value);
          formData.append("edit", document.getElementById("edit").value);
        });

        this.on("success", function(file, response) {
          window.location.href = response.url;
        });

        {{#if data.image}}
          var mockFile = { name: "{{data.image}}", size: "1234", accepted: true, type: "image/jpeg" };
          this.files.push(mockFile);
          this.emit("addedfile", mockFile);
          this.emit("thumbnail", mockFile, "/img/recipes/{{data.image}}.jpg");
          this.emit("completed", mockFile);
          // add a hidden field with the imagename
          hField = document.createElement("input");
          hField.setAttribute("type", "hidden");
          hField.setAttribute("name", "existingimage");
          hField.setAttribute("value", "{{data.image}}");
          hField.id = "existingimage";
          document.getElementById("add-recipe-form").appendChild(hField);
        {{/if}}
    }
});
</script>
