
{{> logo}}

<div class="w-2/3 mx-auto">
  <form action="/add" method="post">
    <div class="w-full mb-2">
      <input class="w-full m-1 rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50" type="text" name="title" id="title" placeholder="Title" value="{{data.title}}" autofocus>
    </div>

    <!-- dropzone -->
    <div class="w-full border-2 border-dashed rounded-md mb-2 dropzone" id="add-recipe"></div>
    <div class="w-full mb-2 hidden" id="dropzone-preview"></div>

    <!-- help -->
    <a onClick="toggleHelpOn()">
      <div id="help-btn" class="rounded-md bg-slate-300 text-slate-500 text-sm p-2">Instructions</div>
    </a>
    <a onClick="toggleHelpOff()">
      <div id="help" class="hidden">
        <div class="bg-slate-300 text-slate-500 text-sm p-2 rounded-t-md">Instructions</div>
        <div class="text-sm border border-slate-300 rounded-b-md p-4 text-left font-mono space-y-5">
          <p>Each line is a recipe step.</p>

          <p>
            Mark ingredients by starting with an "@" and ending with "{}"<br />
            <span class="text-slate-500">Example: cook @chicken legs{} until done</span>
          </p>

          <p>
            Denote quantity inside curly braces<br />
            <span class="text-slate-500">Example: cook @chicken{2 drumsticks} until done</span>
          </p>

<!--
          <p>
            <span class="underline">Voice dictation:</span><br />
            Voice dictation makes it easier to create recipes on mobile.  Certain keywords are converted into new lines in voice-dict mode and removed from the final recipe:
          </p>
          <p>
            <ul class="list-disc list-inside">
              <li>First</li>
              <li>Next</li>
              <li>Finally</li>
              <li>And then (auto-removed in final recipe)</li>
            </ul>
          </p>
-->
        </div>
      </div>
    </a>

    <div class="w-full mb-2">
      {{> recipeeditor recipe=data.recipe}}
    </div>

    <input type="hidden" name="edit" id="edit" value="{{data.slug}}">

    <div class="grid grid-cols-3 gap-3 w-full mx-auto">
      {{#if back}}
        <a href="{{back}}">
      {{else}}
        <a href="/">
      {{/if}}
        <div class="w-full bg-red-100 hover:bg-red-200 p-3 rounded-md">
          X
        </div>
      </a>
      <div class="col-span-2">
        <input class="w-full bg-blue-300 hover:bg-blue-400 p-3 rounded-md cursor-pointer" type="submit" value="Save" id="submit-recipe">
      </div>
    </div>
  </form>
</div>

<div id="dropzone-template" class="hidden">
  <div class="dz-preview dz-file-preview">
    <img class="rounded-md ml-1" data-dz-thumbnail />
  </div>
</div>

<script type="text/javascript">
function toggleHelpOn() {
  document.getElementById('help-btn').classList.add('hidden');
  document.getElementById('help').classList.remove('hidden');
}

function toggleHelpOff() {
  document.getElementById('help-btn').classList.remove('hidden');
  document.getElementById('help').classList.add('hidden');
}
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/dropzone/5.5.1/min/dropzone.min.js"></script>
<script type="text/javascript">
Dropzone.autoDiscover = false;
upload_icon = '<img src="/img/upload.png" class="h-24 mx-auto p-3">';

theOne = new Dropzone("div#add-recipe", {
    autoProcessQueue: false,
    uploadMultiple: false,
    parallelUploads: 1,
    maxFiles: 1,
    maxFilesize: 15,
    paramName: 'recipe',
    url: "/add",
    thumbnailWidth: 600,
    thumbnailHeight: null,
    acceptedFiles: 'image/*',
    dictDefaultMessage: upload_icon,
    dictRemoveFile: '',
    dictCancelUpload: 'Uploading...',
    previewsContainer: document.getElementById('dropzone-preview'),
    addRemoveLinks: true,
    previewTemplate: document.getElementById('dropzone-template').innerHTML,

    init: function() {
        var myDropzone = this;  // closure

        // First change the button to actually tell Dropzone to process the queue.
        document.getElementById("submit-recipe").addEventListener("click", function(e) {
          // move the recipeeditor content into the textarea
          document.getElementById("recipe").value = document.getElementById("recipeeditor").innerText;

          if (myDropzone.getQueuedFiles().length > 0) {
            // Make sure that the form isn't actually being sent.
            e.preventDefault();
            e.stopPropagation();
            myDropzone.processQueue();
          }
        });

        this.on("thumbnail", function(file, dataUrl) {
          // toggle containers
          document.getElementById('add-recipe').classList.add('hidden');
          document.getElementById('dropzone-preview').classList.remove('hidden');

          // style the remove button
          remove = document.getElementsByClassName('dz-remove')[0];
          remove.classList.add('text-sm');
          remove.innerHTML = "<div class='w-full bg-slate-200 p-4 text-center text-sm rounded-md ml-1 mt-2 '>Remove image</div>";
        });

        this.on("removedfile", function(file) {
          this.removeAllFiles();
          document.getElementById('add-recipe').classList.remove('hidden');
          document.getElementById('dropzone-preview').classList.add('hidden');
        });

        this.on("sending", function(data, xhr, formData) {
          formData.append("title", document.getElementById("title").value);
          formData.append("recipe", document.getElementById("recipe").value);
          formData.append("edit", document.getElementById("edit").value);
        });

        this.on("success", function(file, response) {
          window.location.href = response.url;
        });

        {{#if data.image}}
          var mockFile = { name: "recipeimg", size: "1234", accepted: true, type: "image/jpeg" };
          this.files.push(mockFile);
          this.emit("addedfile", mockFile);
          this.emit("thumbnail", mockFile, "/img/recipes/{{data.image}}.jpg");
          this.emit("completed", mockFile);
        {{/if}}
    }
});
</script>