
{{> recipeeditor/ingredients_list}}

{{> recipeeditor/core placeholder="Type recipe here"}}

<div id="editmenu" class="hidden absolute rounded-md bg-slate-300 text-sm p-3 cursor-pointer">Ingredient</div>


<script type="text/javascript">
// global objects
const container = document.getElementById("recipeeditor");
const editmenu = document.getElementById("editmenu");
var ingredientslist = {};

// wysiwyg logic
function checkHighlight(e) {
    // only show the edit menu if there is highlighted text
    if (window.getSelection().toString()) {
        editmenu.style.left = e.pageX + "px";
        editmenu.style.top = e.pageY + "px";
        editmenu.classList.remove("hidden");
    }
}

function hideEditMenu() {
    editmenu.classList.add("hidden");
}

function setIngredient() {
    var highlighted_text = window.getSelection().toString();

    // add the ingredient to the list if it's new
    if (!ingredientslist.hasOwnProperty(highlighted_text)) {
        ingredientslist[highlighted_text] = '';
    }

    // extract the text string and shove it into a span
    var selection = window.getSelection().getRangeAt(0);
    var selected_text = selection.extractContents();
    var span = document.createElement("span");
    span.classList.add("ingredient", "text-green-500");
    //span.id = selected_text;
    span.appendChild(selected_text);
    selection.insertNode(span);
    window.getSelection().removeAllRanges();

    // re-render the ingredients table
    populateIngredientsTable();

    // hide the context menu
    editmenu.classList.add("hidden");
}

function removeIngredient(ingredient) {
    // pop the ingredient off the list
    delete ingredientslist[ingredient];

    // scan all the ingredient spans until we find the one that matches
    allSpans = document.getElementsByClassName("ingredient");
    Array.from(allSpans).forEach(span => {
        if (span.innerText == ingredient) {
            span.outerHTML = span.innerHTML;
            span.remove();
        }
    });

    // re-render the ingredients table
    populateIngredientsTable();
}

function populateIngredientsTable() {
    // drop all table rows
    ingredientstable.textContent = "";

    // add each ingredient as a row
    for (let [ingredient, qty] of Object.entries(ingredientslist)) {
        // set up table elements
        var tr = document.createElement("tr");
        var tdLeft = document.createElement("td");
        tdLeft.classList.add("text-right", "p-2");
        var tdRight = document.createElement("td");
        tdRight.classList.add("text-left", "p-2");

        // create left-td
        var fieldLabel = document.createElement("span");
        fieldLabel.classList.add("text-sm", "text-green-500")
        fieldLabel.innerHTML = ingredient;
        tdLeft.appendChild(fieldLabel);
        var fieldName = document.createElement("input");
        fieldName.setAttribute("type", "hidden");
        fieldName.setAttribute("name", "ingredientname[]");
        fieldName.setAttribute("value", ingredient);
        tdLeft.appendChild(fieldName);

        // create right-td
        var fieldQty = document.createElement("input");
        fieldQty.setAttribute("type", "text");
        fieldQty.setAttribute("name", "ingredientqty[]");
        fieldQty.setAttribute("placeholder", "Qty");
        fieldQty.setAttribute("value", qty);
        fieldQty.classList.add("w-1/2", "border-0", "text-sm", "mr-2");
        tdRight.appendChild(fieldQty);
        var removeBtn = document.createElement("a");
        removeBtn.setAttribute("onClick", "removeIngredient('" + ingredient + "')");
        removeBtn.innerText = "X";
        removeBtn.classList.add("hover:text-red-300", "hover:cursor-pointer")
        tdRight.appendChild(removeBtn);
        
        // attach to DOM
        tr.appendChild(tdLeft);
        tr.appendChild(tdRight);
        ingredientstable.appendChild(tr); 
    };

    // toggle the placeholder text
    if (ingredientstable.childElementCount == 0) {
        ingredientslistplaceholder1.classList.remove("hidden");
        ingredientslistplaceholder2.classList.add("hidden");
    } else {
        ingredientslistplaceholder1.classList.add("hidden");
        ingredientslistplaceholder2.classList.remove("hidden");
    }
}

function saveIngredientQty() {
    allTrs = document.getElementsByTagName("tr");
    Array.from(allTrs).forEach(tr => {
        let tds = tr.childNodes;
        // grab the value from hidden field rather than innerText of span field because innerText strips white space and makes a new key in ingredientlist
        ingredient = tds[0].lastChild.value;
        qty = tds[1].firstChild.value;
        ingredientslist[ingredient] = qty;
    });
}

// event listeners
// order matters - document always hides the menu onmousedown then container (potentially) reveals it again onmouseup
document.onmousedown = hideEditMenu;
container.onmouseup = checkHighlight;
editmenu.onmousedown = setIngredient;
ingredientstable.oninput = saveIngredientQty;
</script>



